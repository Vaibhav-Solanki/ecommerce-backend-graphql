scalar DateTime
scalar File

enum PaymentStatus{
    Received
    Pending
    Requested
}

enum PaymentType{
    COD
    PREPAID
}

type OpResult {
    result: Boolean!
    code: Int
    message: String
}

type Brand {
    id: Int!
    name: String!
    description: String
    website: String
    products: [Product]
    created_at: DateTime
}

type Category {
    id: Int!
    name: String!
    description: String
    parent_category_id: Int
    parent_category: Category
    sub_category: [Category]
    created_at: DateTime
}

type ProductImage{
    id: Int!
    product_id: Int!
    url: String!
    created_at: DateTime
}

type Product {
    id: Int!
    brand_id: Int
    brand: Brand
    category_id: Int
    category: Category
    name: String!
    description: String
    product_images: [ProductImage]
    price: Float!
    discounted_price: Float!
    stock_quantity: Int!
    reserved_quantity: Int!
    created_at: DateTime!
}

type Address {
    id: Int!
    customer_id: Int!
    customer: Customer
    address_line1: String!
    address_line2: String
    city: String!
    state: String!
    country: String!
    postal_code: String!
    created_at: DateTime
}

type Customer {
    id: Int!
    name: String
    picture: String
    email: String!
    uid: String!
    created_at: DateTime!
    addresses: [Address]
}

type Order {
    id: Int!
    customer_id: Int!
    customer: Customer
    order_date: DateTime
    total_amount: Float!
    status: String!
    shipping_address_id: Int!
    shipping_address: Address
    payment_method: PaymentType
    value_distribution: [ValueDistribution]
    payment_status: PaymentStatus!
    order_items: [OrderItem]
    created_at: DateTime
}

type OrderItem {
    id: Int!
    order_id: Int!
    order: Order
    product_id: Int!
    product: Product
    quantity: Int!
    unit_price: Float!
    created_at: DateTime
}

type ValueDistribution{
    type :String!
    value:Float!
}

type CartItem {
    id: Int!
    product_id: Int!
    product: Product!
    quantity: Int!
    total_value: Float!
    created_at: DateTime!
}

type Cart {
    customer_id: Int!
    customer: Customer
    cart_items: [CartItem!]!
    value_distribution: [ValueDistribution]
    total_value: Float!
}

type OrderPayment {
    id: Int!
    order_id: Int!
    order: Order
    amount: Float!
    payment_date: DateTime
    payment_status: String!
    payment_method: PaymentType
    created_at: DateTime
}

type Review {
    id: Int!
    product_id: Int
    product: Product
    customer_id: Int
    customer_name: String
    rating: Int
    review_text: String
    review_date: DateTime
}

type Query {
    Ping: String
    brands: [Brand]
    brand(id: Int!): Brand
    categories(level: Int): [Category]
    category(id: Int!): Category
    products(category_id: Int brand_id: Int): [Product]
    product(id: Int!): Product
    address(id: Int!): Address
    addresses: [Address]
    customers: [Customer]
    customer(id: Int!): Customer
    getUser: Customer
    orders: [Order]
    order(id: Int!): Order
    cart: Cart
    orderPayments: [OrderPayment]
    orderPayment(order_id: Int!): OrderPayment
    reviews(product_id: Int!): [Review]
}

type Mutation {
    createAddress(address_line1: String!, address_line2: String, city: String!, state: String!, country: String!, postal_code: String!): Address
    updateAddress(id: Int!, address_line1: String, address_line2: String, city: String, state: String, country: String, postal_code: String): OpResult

    updateCustomer(name: String, picture: String): Customer

    placeOrder(shipping_address_id: Int!, payment_method: PaymentType): OpResult

    addToCart(product_id: Int!, quantity: Int!): OpResult
    saveFile(file: File!): String

    createReview(product_id: Int!, rating: Int!, review_text: String): Review

    flushAll: Boolean
}

type Subscription {
    countdown(from: Int!): Int!
}
